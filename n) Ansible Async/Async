

In Ansible, tasks normally run one after another, waiting for each one to finish. But sometimes, you want a task to run **in the background** without waiting. This is called **Async**.

---

### **What is Ansible Async?**

- **`async`**: Lets a task run in the background and gives it a time limit.
- **`poll`**: Controls if Ansible waits for the task or not:
  - **`poll: 0`**: Task runs in the background; Ansible moves on.
  - **`poll > 0`**: Ansible checks the task regularly.

---

### **Why Use Async?**
- **Long tasks**: Like downloading big files, upgrading a system, or backups.
- **Save time**: Run tasks in the background while doing other tasks.

---

### **Example 1: Run a Task in the Background**

```yaml
- name: Run a background task
  hosts: all
  tasks:
    - name: Download a large file
      get_url:
        url: https://example.com/largefile.iso
        dest: /tmp/largefile.iso
      async: 300   # Task can take up to 300 seconds (5 minutes)
      poll: 0      # Run in the background
```

- Ansible wonâ€™t wait for this task to finish.

---

### **Example 2: Check the Task While It Runs**

```yaml
- name: Run and check a long task
  hosts: all
  tasks:
    - name: Upgrade the system
      command: /usr/bin/upgrade-system
      async: 600   # Task has 10 minutes
      poll: 5      # Check every 5 seconds
```

- Ansible checks the task every 5 seconds to see if it is done.

---

### **Example 3: Check Later if a Task Finished**

```yaml
- name: Run task and check later
  hosts: all
  tasks:
    - name: Start a background task
      shell: sleep 300
      async: 300
      poll: 0
      register: task_info

    - name: Check task status
      async_status:
        jid: "{{ task_info.ansible_job_id }}"
      register: task_status
      until: task_status.finished
      retries: 10
      delay: 30
```

- Start a task in the background and check its status every 30 seconds.

---

### **Summary**
- **Async** runs tasks without waiting.
- Use **`poll: 0`** to let the task run in the background.
- Check a task later with **`async_status`**.

Async is great for **long-running tasks** to save time!
